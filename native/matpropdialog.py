# This file was automatically generated by pywxrc.
# -*- coding: UTF-8 -*-

import wx
import wx.xrc as xrc
from core.listobject import *

__res = None

def get_resources():
    """ This function provides access to the XML resources in this module."""
    global __res
    if __res == None:
        __init_resources()
    return __res

class FloatValidator(wx.PyValidator):
     """ This validator is used to ensure that the user has entered something
         into the text object editor dialog's text field.
     """
     def __init__(self, staticText = None):
         """ Standard constructor.
         """
         wx.PyValidator.__init__(self)
         self.staticText = staticText



     def Clone(self):
         """ Standard cloner.

             Note that every validator must implement the Clone() method.
         """
         return FloatValidator(staticText = self.staticText)


     def Validate(self, win):
        """ Validate the contents of the given text control.
        """
        textCtrl = self.GetWindow()
        text = textCtrl.GetValue()
        print text

        try:
            float(text)
        except ValueError:
            textCtrl.SetBackgroundColour("pink")
            #textCtrl.SetFocus()
            self.staticText.SetLabel('Invalid')
            textCtrl.Refresh()
            return False
        textCtrl.SetBackgroundColour(
            wx.SystemSettings_GetColour(wx.SYS_COLOUR_WINDOW))
        self.staticText.SetLabel('')
        textCtrl.Refresh()
        return True

     def TransferToWindow(self):
         return True # Prevent wxDialog from complaining.

     def TransferFromWindow(self):
         return True # Prevent wxDialog from complaining.

class MaterialPropertyDialog(wx.Dialog):
#!XRCED:begin-block:xrcMaterialDialog.PreCreate
    def PreCreate(self, pre):
        """ This function is called during the class's initialization.
        
        Override it for custom setup before the window is created usually to
        set additional window styles using SetWindowStyle() and SetExtraStyle().
        """
        pass
        
#!XRCED:end-block:xrcMaterialDialog.PreCreate

    def __init__(self, parent, materialId = None):
        # Two stage creation (see http://wiki.wxpython.org/index.cgi/TwoStageCreation)
        pre = wx.PreDialog()
        self.PreCreate(pre)
        get_resources().LoadOnDialog(pre, parent, "MaterialDialog")
        self.PostCreate(pre)

        self.materialId = materialId
        # Define variables for the controls, bind event handlers
        self.name = xrc.XRCCTRL(self, 'name')
        self.nameError = xrc.XRCCTRL(self, 'nameError')
        self.name.SetValidator(FloatValidator(staticText = self.nameError))

        self.youngsModulus = xrc.XRCCTRL(self, 'youngsModulus')
        self.youngsModulusError = xrc.XRCCTRL(self, 'youngsModulusError')
        self.youngsModulus.SetValidator(FloatValidator(staticText = self.youngsModulusError))

        self.density = xrc.XRCCTRL(self, 'density')
        self.densityError = xrc.XRCCTRL(self, 'densityError')
        self.density.SetValidator(FloatValidator(staticText = self.densityError))

        self.poissonsRatio = xrc.XRCCTRL(self, 'poissonsRatio')
        self.poissonsRatioError = xrc.XRCCTRL(self, 'poissonsRatioError')
        self.poissonsRatio.SetValidator(FloatValidator(staticText = self.poissonsRatioError))

        self.shearModulus = xrc.XRCCTRL(self, 'shearModulus')
        self.shearModulusError = xrc.XRCCTRL(self, 'shearModulusError')
        self.shearModulus.SetValidator(FloatValidator(staticText = self.shearModulusError))

        self.saveBtn = xrc.XRCCTRL(self, 'save')
        self.cancelBtn = xrc.XRCCTRL(self, 'cancel')

        self.saveBtn.Bind(wx.EVT_BUTTON, self.OnSave)
        self.cancelBtn.Bind(wx.EVT_BUTTON, self.OnCancel)

        if materialId is not None:
            self.LoadData()

    def LoadData(self):
        mat = getMaterialById(self.materialId)
        self.youngsModulus.SetValue(str(mat.youngs_modulus))
        self.shearModulus.SetValue(str(mat.shear_modulus))
        self.poissonsRatio.SetValue(str(mat.poissons_ratio))
        self.density.SetValue(str(mat.density))
        self.name.SetValue(mat.name)
        self.name.SetValue(mat.comment)

    def OnSave(self, event):
        self.Validate()

    def OnCancel(self, event):
        self.Close()


# ------------------------ Resource data ----------------------

def __init_resources():
    global __res
    __res = xrc.EmptyXmlResource()

    __res.Load('resource/xrc/mat_property_dialog.xrc')