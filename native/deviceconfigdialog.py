#!/usr/bin/env python
# generated by wxGlade 0.3.1 on Thu Oct 02 23:25:44 2003

#from wxPython.wx import *
import wx
import serial

try:
    enumerate
except NameError:
    def enumerate(sequence):
        return zip(range(len(sequence)), sequence)

class DeviceConfigDialog(wx.Dialog):
    """Serial Port confiuration dialog, to be used with pyserial 2.0+
       When instantiating a class of this dialog, then the "serial" keyword
       argument is mandatory. It is a reference to a serial.Serial instance.
       the optional "show" keyword argument can be used to show/hide different
       settings. The default is SHOW_ALL which coresponds to 
       SHOW_BAUDRATE|SHOW_FORMAT|SHOW_FLOW|SHOW_TIMEOUT. All constants can be
       found in ths module (not the class)."""
    
    def __init__(self, *args, **kwds):
        #grab the serial keyword and remove it from the dict
        self.gpib = kwds['gpib']
        self.labpid = kwds['labpid']
        del kwds['gpib']
        del kwds['labpid']
        # begin wxGlade: SerialConfigDialog.__init__
        # end wxGlade
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_2 = wx.StaticText(self, -1, "Port")
        self.combo_box_gpib_port = wx.ComboBox(self, -1, choices=["dummy1", "dummy2", "dummy3", "dummy4", "dummy5"], style=wx.CB_DROPDOWN)
        self.combo_box_labpid_port = wx.ComboBox(self, -1, choices=["dummy1", "dummy2", "dummy3", "dummy4", "dummy5"], style=wx.CB_DROPDOWN)

        self.label_1 = wx.StaticText(self, -1, "Baudrate")
        self.choice_gpib_baudrate = wx.Choice(self, -1, choices=["choice 1"])
        self.choice_labpid_baudrate = wx.Choice(self, -1, choices=["choice 1"])

        self.checkbox_gpib_timeout = wx.CheckBox(self, -1, "Use Timeout")
        self.text_ctrl_gpib_timeout = wx.TextCtrl(self, -1, "")
        self.checkbox_labpid_timeout = wx.CheckBox(self, -1, "Use Timeout")
        self.text_ctrl_labpid_timeout = wx.TextCtrl(self, -1, "")
        self.label_gpib_timeout = wx.StaticText(self, -1, "seconds")
        self.label_labpid_timeout = wx.StaticText(self, -1, "seconds")

        self.button_ok = wx.Button(self, -1, "OK")
        self.button_cancel = wx.Button(self, -1, "Cancel")

        self.__set_properties()
        self.__do_layout()
        #fill in ports and select current setting
        index = 0
        self.combo_box_gpib_port.Clear()
        self.combo_box_labpid_port.Clear()
        for n in range(20):
            portname = serial.device(n)
            self.combo_box_gpib_port.Append(portname)
            if self.gpib.portstr == portname:
                index = n
        '''
        if self.gpib.portstr is not None:
            self.combo_box_gpib_port.SetValue(str(self.gpib.portstr))
        else:
            self.combo_box_gpib_port.SetSelection(index)
        '''
        self.combo_box_gpib_port.SetSelection(6)
        for n in range(20):
            portname = serial.device(n)
            self.combo_box_labpid_port.Append(portname)
            if self.labpid.portstr == portname:
                index = n
        '''
        if self.labpid.portstr is not None:
            self.combo_box_labpid_port.SetValue(str(self.labpid.portstr))
        else:
            self.combo_box_labpid_port.SetSelection(index)
        '''
        self.combo_box_labpid_port.SetSelection(9)

        #fill in badrates and select current setting
        self.choice_gpib_baudrate.Clear()
        self.choice_labpid_baudrate.Clear()
        for n, baudrate in enumerate(self.gpib.BAUDRATES):
            self.choice_gpib_baudrate.Append(str(baudrate))
            if self.gpib.baudrate == baudrate:
                index = n
        self.choice_gpib_baudrate.SetSelection(index)

        for n, baudrate in enumerate(self.labpid.BAUDRATES):
            self.choice_labpid_baudrate.Append(str(baudrate))
            if self.labpid.baudrate == baudrate:
                index = n
        self.choice_labpid_baudrate.SetSelection(index)

        #set the timeout mode and value
        if self.gpib.timeout is None:
            self.checkbox_gpib_timeout.SetValue(False)
            self.text_ctrl_gpib_timeout.Enable(False)
        else:
            self.checkbox_gpib_timeout.SetValue(True)
            self.text_ctrl_gpib_timeout.Enable(True)
            self.text_ctrl_gpib_timeout.SetValue(str(self.gpib.timeout))

        if self.labpid.timeout is None:
            self.checkbox_labpid_timeout.SetValue(False)
            self.text_ctrl_labpid_timeout.Enable(False)
        else:
            self.checkbox_labpid_timeout.SetValue(True)
            self.text_ctrl_labpid_timeout.Enable(True)
            self.text_ctrl_labpid_timeout.SetValue(str(self.gpib.timeout))
        #attach the event handlers
        self.__attach_events()

    def __set_properties(self):
        # begin wxGlade: SerialConfigDialog.__set_properties
        # end wxGlade
        self.SetTitle("Device Port Configuration")
        self.text_ctrl_gpib_timeout.Enable(0)
        self.text_ctrl_labpid_timeout.Enable(0)
        self.button_ok.SetDefault()

    def __do_layout(self):
        # begin wxGlade: SerialConfigDialog.__do_layout
        # end wxGlade
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        #gpib
        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_basics = wx.StaticBoxSizer(wx.StaticBox(self, -1, "GPIB"), wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5.Add(self.label_2, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_5.Add(self.combo_box_gpib_port, 1, 0, 0)
        sizer_basics.Add(sizer_5, 0, wx.RIGHT|wx.EXPAND, 0)

        sizer_gpib_baudrate = wx.BoxSizer(wx.HORIZONTAL)
        sizer_gpib_baudrate.Add(self.label_1, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_gpib_baudrate.Add(self.choice_gpib_baudrate, 1, wx.ALIGN_RIGHT, 0)
        sizer_basics.Add(sizer_gpib_baudrate, 0, wx.EXPAND, 0)
        sizer_2.Add(sizer_basics, 0, wx.EXPAND, 0)

        sizer_gpib_timeout = wx.StaticBoxSizer(wx.StaticBox(self, -1, "Timeout"), wx.HORIZONTAL)
        sizer_gpib_timeout.Add(self.checkbox_gpib_timeout, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_gpib_timeout.Add(self.text_ctrl_gpib_timeout, 0, 0, 0)
        sizer_gpib_timeout.Add(self.label_gpib_timeout, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_2.Add(sizer_gpib_timeout, 0, 0, 0)

        #labpid



        sizer_3 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_basics = wx.StaticBoxSizer(wx.StaticBox(self, -1, "LABPID"), wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5.Add(self.label_2, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_5.Add(self.combo_box_labpid_port, 1, 0, 0)
        sizer_basics.Add(sizer_5, 0, wx.RIGHT|wx.EXPAND, 0)
        sizer_labpid_baudrate = wx.BoxSizer(wx.HORIZONTAL)
        sizer_labpid_baudrate.Add(self.label_1, 1, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_labpid_baudrate.Add(self.choice_labpid_baudrate, 1, wx.ALIGN_RIGHT, 0)
        sizer_basics.Add(sizer_labpid_baudrate, 0, wx.EXPAND, 0)
        sizer_2.Add(sizer_basics, 0, wx.EXPAND, 0)

        sizer_labpid_timeout = wx.StaticBoxSizer(wx.StaticBox(self, -1, "Timeout"), wx.HORIZONTAL)
        sizer_labpid_timeout.Add(self.checkbox_labpid_timeout, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_labpid_timeout.Add(self.text_ctrl_labpid_timeout, 0, 0, 0)
        sizer_labpid_timeout.Add(self.label_labpid_timeout, 0, wx.ALL|wx.ALIGN_CENTER_VERTICAL, 4)
        sizer_2.Add(sizer_labpid_timeout, 0, 0, 0)


        sizer_3.Add(self.button_ok, 0, 0, 0)
        sizer_3.Add(self.button_cancel, 0, 0, 0)
        sizer_2.Add(sizer_3, 0, wx.ALL|wx.ALIGN_RIGHT, 4)

        self.SetAutoLayout(1)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        sizer_2.SetSizeHints(self)
        self.Layout()

    def __attach_events(self):
        wx.EVT_BUTTON(self, self.button_ok.GetId(), self.OnOK)
        wx.EVT_BUTTON(self, self.button_cancel.GetId(), self.OnCancel)

        wx.EVT_CHECKBOX(self, self.checkbox_labpid_timeout.GetId(), self.OnTimeout)
        wx.EVT_CHECKBOX(self, self.checkbox_gpib_timeout.GetId(), self.OnTimeout)

    def OnOK(self, events):
        successGpib = True
        self.gpib.port     = str(self.combo_box_gpib_port.GetValue())
        self.gpib.baudrate = self.gpib.BAUDRATES[self.choice_gpib_baudrate.GetSelection()]
        if self.checkbox_gpib_timeout.GetValue():
            try:
                self.gpib.timeout = float(self.text_ctrl_gpib_timeout.GetValue())
            except ValueError:
                dlg = wx.MessageDialog(self, 'GPIB Timeout must be a numeric value',
                                            'Value Error', wx.OK | wx.ICON_ERROR)
                dlg.ShowModal()
                dlg.Destroy()
                successGpib = False
        else:
            self.gpib.timeout = None

        successLabpid = True
        self.labpid.port     = str(self.combo_box_labpid_port.GetValue())
        self.labpid.baudrate = self.labpid.BAUDRATES[self.choice_labpid_baudrate.GetSelection()]
        if self.checkbox_labpid_timeout.GetValue():
            try:
                self.labpid.timeout = float(self.text_ctrl_labpid_timeout.GetValue())
            except ValueError:
                dlg = wx.MessageDialog(self, 'Labpid Timeout must be a numeric value',
                                            'Value Error', wx.OK | wx.ICON_ERROR)
                dlg.ShowModal()
                dlg.Destroy()
                successLabpid = False
        else:
            self.labpid.timeout = None
        if successGpib and successLabpid:
            self.EndModal(wx.ID_OK)

    def OnCancel(self, events):
        self.EndModal(wx.ID_CANCEL)

    def OnTimeout(self, events):
        if self.checkbox_labpid_timeout.GetValue():
            self.text_ctrl_labpid_timeout.Enable(True)
        else:
            self.text_ctrl_labpid_timeout.Enable(False)

        if self.checkbox_gpib_timeout.GetValue():
            self.text_ctrl_gpib_timeout.Enable(True)
        else:
            self.text_ctrl_gpib_timeout.Enable(False)

# end of class SerialConfigDialog


class MyApp(wx.App):
    """Test code"""
    def OnInit(self):
        wx.InitAllImageHandlers()
        
        gpib = serial.Serial()
        print gpib
        labpid = serial.Serial()
        print labpid
        #loop until cancel is pressed, old values are used as start for the next run
        #show the different views, one after the other
        #value are kept.
        #the user can play around with the values, CANCEL aborts the loop
        while 1:
            dialog_serial_cfg = DeviceConfigDialog(None, -1, "", gpib=gpib, labpid=labpid)
            self.SetTopWindow(dialog_serial_cfg)
            result = dialog_serial_cfg.ShowModal()
            #print gpib, labpid
            if result != wx.ID_OK:
                break
        return 0

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
